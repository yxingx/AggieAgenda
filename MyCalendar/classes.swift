//
//  classes.swift
//  MyCalendar
//
//  Created by Yan Yubing on 11/30/19.
//  Copyright Â© 2019 Yan Yubing. All rights reserved.
//
import Foundation
import Firebase

//class event element in use:
//title: event title
//isCanvas event: differentiate between user added event and canvas loaded event
//date: due date loaded from canvas or selected from date picker
//subject: if is canvas event, load course title of that assignment
class event {
    var title:String
    var isCanvasevent: Bool
    var date:String
    var discription:String
    var isDone:Bool
    var subject:String
    var memo:String
    
    init(_ dataString: String, _ dateString: String, _ isCanvas: Bool, _ course: String){
        title = dataString
        isCanvasevent = isCanvas
        date = dateString
        discription = ""
        isDone = false
        subject = course
        memo = ""
    }
}
// class User stores the personal information other than event:
//user: a dictionary of all collected event sorted by date
//id: user email obtained upon signed up, differentiate every user
//token: if use ucd email, save the authentication token for api call generated by user
//isfromCanvas: check whether is canvas user
class User {
    var user = [(key: Date, value: [event])] ()
    var id: String? = nil
    var username: String? = nil
    var token:String? = nil
    var isfromCanvas:Bool? = nil
    
    func getid(isCanvas: Bool, email: String, token: String, canvasapi: Api, completionHandler: @escaping (_ Response: String?, _ Error: String?)->Void){
        if(!isCanvas){
            self.id = email
            self.token = ""
            self.isfromCanvas = false
            completionHandler("response", nil)
        }else{
            canvasapi.getUserinformation(token:token){
                response, error in
                if(response != nil){
                    self.id = email
                    self.token = token
                    self.username = canvasapi.username
                    self.isfromCanvas = true
                    print("check")
                    DispatchQueue.main.async{
                        completionHandler("response", nil)
                    }
                }
                if(error != nil){
                    self.isfromCanvas = false
                    self.id = email
                    self.token = ""
                    DispatchQueue.main.async{
                        completionHandler("response", nil)
                    }
                }
            }
        }
    }
    
    //get data from firestore in their stored format
    //structure: users->email->date->event information (isCanvas, subject)
    func getdata(db: Firestore, dates: Array<AnyObject>, completionHandler: @escaping (_ Response: String?, _ Error: String?)->Void){
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        var temp = [(key: Date, value: [event])] ()
        guard let dname = self.id else{
            DispatchQueue.main.async{
                completionHandler(nil, "error")
            }
            return
        }
        let dispatchGroup = DispatchGroup.init()
        let dispatchQueue = DispatchQueue(label: "taskQueue")
        let dispatchSemaphore = DispatchSemaphore(value: 0)
        dispatchQueue.async{
            for i in dates{
                dispatchGroup.enter()
                let date = String(_cocoaString: i)
                guard let formatdate = dateFormatter.date(from: date) else {
                    DispatchQueue.main.async{
                        completionHandler(nil, "error")
                    }
                    return}
                let checkdate = Date.checkdate
                var tempevents = [event]()
                if checkdate < formatdate{
                    let userref = db.collection("users").document(dname).collection(date)
                    userref.getDocuments{(document, error) in
                        if let document = document, !document.isEmpty{
                            for j in document.documents{
                                let iscanvas = (j.data()["isCanvas"] as? Bool) ?? false
                                let subject = (j.data()["Subject"] as? String) ?? ""
                                // need modify
                                let tempevent = event.init(j.documentID, date, iscanvas, subject)
                                tempevents.append(tempevent)
                            }
                            temp.append((key: formatdate, value: tempevents))
                            self.user = temp
                            dispatchSemaphore.signal()
                            dispatchGroup.leave()
                        }else{
                            DispatchQueue.main.async {
                                completionHandler(nil, "error")
                            }
                        }
                    }
                }else{
                    continue
                }
                dispatchSemaphore.wait()
            }
        }
        dispatchGroup.notify(queue: dispatchQueue){
            DispatchQueue.main.async {
                completionHandler("complete", nil)
            }
            
        }
        //maybe use a dispatch queue group for optimizing here
        
        
    }
}

